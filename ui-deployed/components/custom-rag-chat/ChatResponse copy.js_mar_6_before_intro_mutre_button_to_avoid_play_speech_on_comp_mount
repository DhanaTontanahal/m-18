import React, { useState, useEffect, useRef } from "react";
import ReactMarkdown from "react-markdown";
import { motion } from "framer-motion";
import { FaThumbsUp, FaThumbsDown, FaPlayCircle } from "react-icons/fa";

const ChatResponse = ({
  message,
  videoLink,
  isAssistant,
  autoPlay,
  endPoint,
}) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [feedback, setFeedback] = useState(null);
  const [audioSrc, setAudioSrc] = useState(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const audio = new Audio();
  const hasPlayed = useRef(false); // ✅ Track if autoPlay has already run

  // Auto-play when receiving a new assistant message (Run only once)
  useEffect(() => {
    if (autoPlay && isAssistant && !hasPlayed.current) {
      hasPlayed.current = true; // ✅ Prevent repeated execution
      playSpeech();
    }
  }, [autoPlay, isAssistant]);

  // Function to generate and play speech
  const playSpeech = async () => {
    try {
      const response = await fetch(`${endPoint}/generate-audio/`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text: message, endpointUrl: endPoint }),
      });

      const data = await response.json();
      audio.src = data.audio_url;
      audio.play();
      setIsPlaying(true);
      audio.onended = () => setIsPlaying(false);
    } catch (error) {
      console.error("Error generating speech:", error);
    }
  };

  if (!message && !videoLink) return null;

  // Function to generate speech
  const generateSpeech = async (text) => {
    try {
      const response = await fetch(`${endPoint}/generate-audio/`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text, endpointUrl: endPoint }),
      });

      const data = await response.json();
      setAudioSrc(data.audio_url);
      audio.src = data.audio_url;
      audio.play();
      setIsPlaying(true);
      audio.onended = () => setIsPlaying(false);
    } catch (error) {
      console.error("Error generating speech:", error);
    }
  };

  return (
    <>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="bg-gray-100 rounded-md p-4 relative"
      >
        {message && (
          <ReactMarkdown className="text-gray-800 leading-relaxed">
            {message}
          </ReactMarkdown>
        )}

        {/* Animated Waves Moving Left to Right */}
        {isPlaying && (
          <div className="wave-container">
            <div className="wave wave1"></div>
            <div className="wave wave2"></div>
            <div className="wave wave3"></div>
          </div>
        )}

        {/* Feedback Section */}
        {isAssistant && (
          <div className="feedback-section">
            <motion.div
              className="play-button-wrapper"
              whileTap={{ scale: 0.9 }}
              animate={isPlaying ? { scale: [1, 1.2, 1] } : {}}
              transition={{
                duration: 0.8,
                repeat: Infinity,
                repeatType: "reverse",
              }}
            >
              <motion.div
                className="play-button-glow"
                animate={isPlaying ? { scale: [1, 1.3, 1] } : {}}
                transition={{
                  duration: 1.5,
                  repeat: Infinity,
                  repeatType: "mirror",
                }}
              >
                <FaPlayCircle
                  style={{ width: "50px", height: "100px", cursor: "tooltip" }}
                  className={`play-icon ${isPlaying ? "active" : ""}`}
                  onClick={() => generateSpeech(message)}
                />
              </motion.div>
            </motion.div>
            <span>Was this helpful?</span>
            <FaThumbsUp
              className={`feedback-icon ${feedback === "like" ? "active" : ""}`}
              onClick={() => setFeedback("like")}
            />
            <FaThumbsDown
              className={`feedback-icon ${
                feedback === "dislike" ? "active" : ""
              }`}
              onClick={() => setFeedback("dislike")}
            />
          </div>
        )}
      </motion.div>

      <style jsx>{`
        .feedback-section {
          display: flex;
          align-items: center;
          gap: 10px;
          padding-top: 8px;
          font-size: 14px;
          color: #666;
          margin-top: 10px;
        }

        .play-button-wrapper {
          display: inline-flex;
          align-items: center;
          justify-content: center;
          width: 50px;
          height: 50px;
        }

        .play-button-glow {
          display: flex;
          align-items: center;
          justify-content: center;
          border-radius: 50%;
          width: 50px;
          height: 50px;
          box-shadow: 0 0 15px rgba(0, 123, 255, 0.6);
          transition: box-shadow 0.3s ease-in-out;
        }

        .play-button-glow:hover {
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
          border-radius: 50%;
          width: 100px;
          height: 100px;
          box-shadow: 0 0 30px rgba(0, 123, 255, 0.6);
          transition: box-shadow 0.3s ease-in-out;
        }

        .play-icon {
          font-size: 32px;
          cursor: pointer;
          color: #007bff;
          transition: color 0.2s ease-in-out, transform 0.3s ease-in-out;
        }

        .play-icon.active {
          color: #28a745; /* Green when playing */
          animation: pulse 1.5s infinite;
        }

        .feedback-icon {
          font-size: 18px;
          cursor: pointer;
          color: #999;
          transition: color 0.2s ease-in-out;
        }

        .feedback-icon:hover {
          color: #000;
        }

        .feedback-icon.active {
          color: #007bff; /* Highlight selected feedback */
        }

        /* Waves Moving Left to Right */
        .wave-container {
          position: relative;
          width: 100%;
          height: 30px;
          overflow: hidden;
          margin-top: 15px;
        }

        .wave {
          position: absolute;
          width: 150%;
          height: 100%;
          opacity: 0.7;
          background: linear-gradient(90deg, #007bff 20%, transparent 80%);
          animation: waveMove 3s linear infinite;
        }

        .wave1 {
          top: 0;
          height: 10px;
          animation-duration: 2.5s;
        }

        .wave2 {
          top: 10px;
          height: 15px;
          animation-duration: 3s;
          opacity: 0.5;
        }

        .wave3 {
          top: 20px;
          height: 20px;
          animation-duration: 3.5s;
          opacity: 0.3;
        }

        @keyframes waveMove {
          0% {
            transform: translateX(-100%);
          }
          100% {
            transform: translateX(100%);
          }
        }

        /* Play Button Click Effect */
        @keyframes pulse {
          0% {
            transform: scale(1);
          }
          50% {
            transform: scale(1.1);
          }
          100% {
            transform: scale(1);
          }
        }
      `}</style>
    </>
  );
};

export default ChatResponse;
