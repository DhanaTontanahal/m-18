import React, { useState, useEffect, useRef } from "react";
import ReactMarkdown from "react-markdown";
import { motion } from "framer-motion";
import {
  FaThumbsUp,
  FaThumbsDown,
  FaPlayCircle,
  FaVolumeMute,
  FaVolumeUp,
} from "react-icons/fa";

const ChatResponse = ({
  message,
  videoLink,
  isAssistant,
  autoPlay,
  endPoint,
}) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [feedback, setFeedback] = useState(null);
  const [audioSrc, setAudioSrc] = useState(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const audioRef = useRef(new Audio());
  const hasPlayed = useRef(false);

  // Auto-play when receiving a new assistant message (Run only once)
  useEffect(() => {
    if (autoPlay && isAssistant && !hasPlayed.current && !isMuted) {
      hasPlayed.current = true;
      playSpeech();
    }
  }, [autoPlay, isAssistant, isMuted]);

  // Function to generate and play speech
  const playSpeech = async () => {
    if (isMuted) return; // Prevent playing if muted
    try {
      const response = await fetch(`${endPoint}/generate-audio/`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text: message, endpointUrl: endPoint }),
      });

      const data = await response.json();
      audioRef.current.src = data.audio_url;
      audioRef.current.play();
      setIsPlaying(true);
      audioRef.current.onended = () => setIsPlaying(false);
    } catch (error) {
      console.error("Error generating speech:", error);
    }
  };

  if (!message && !videoLink) return null;

  // Function to generate speech
  const generateSpeech = async (text) => {
    if (isMuted) return; // Prevent playing if muted
    try {
      const response = await fetch(`${endPoint}/generate-audio/`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text, endpointUrl: endPoint }),
      });

      const data = await response.json();
      setAudioSrc(data.audio_url);
      audioRef.current.src = data.audio_url;
      audioRef.current.play();
      setIsPlaying(true);
      audioRef.current.onended = () => setIsPlaying(false);
    } catch (error) {
      console.error("Error generating speech:", error);
    }
  };

  // Toggle mute and play audio if unmuted
  const toggleMute = () => {
    setIsMuted((prev) => {
      if (prev) {
        // If unmuting and there was an audio, play it
        if (audioSrc) {
          audioRef.current.play();
          setIsPlaying(true);
        }
      } else {
        // If muting, stop the audio
        audioRef.current.pause();
        setIsPlaying(false);
      }
      return !prev;
    });
  };

  return (
    <>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="bg-gray-100 rounded-md p-4 relative"
      >
        {message && (
          <ReactMarkdown className="text-gray-800 leading-relaxed">
            {message}
          </ReactMarkdown>
        )}

        {isPlaying && (
          <div className="wave-container">
            <div className="wave wave1"></div>
            <div className="wave wave2"></div>
            <div className="wave wave3"></div>
          </div>
        )}

        {isAssistant && (
          <div className="feedback-section">
            <motion.div
              className="play-button-wrapper"
              whileTap={{ scale: 0.9 }}
              animate={isPlaying ? { scale: [1, 1.2, 1] } : {}}
              transition={{
                duration: 0.8,
                repeat: Infinity,
                repeatType: "reverse",
              }}
            >
              <motion.div
                className="play-button-glow"
                animate={isPlaying ? { scale: [1, 1.3, 1] } : {}}
                transition={{
                  duration: 1.5,
                  repeat: Infinity,
                  repeatType: "mirror",
                }}
              >
                <FaPlayCircle
                  style={{ width: "50px", height: "50px", cursor: "pointer" }}
                  className={`play-icon ${isPlaying ? "active" : ""}`}
                  onClick={() => generateSpeech(message)}
                />
              </motion.div>
            </motion.div>

            <button className="mute-button" onClick={toggleMute}>
              {isMuted ? <FaVolumeMute size={20} /> : <FaVolumeUp size={20} />}
            </button>
            <span>Was this helpful?</span>
            <FaThumbsUp
              className={`feedback-icon ${feedback === "like" ? "active" : ""}`}
              onClick={() => setFeedback("like")}
            />
            <FaThumbsDown
              className={`feedback-icon ${
                feedback === "dislike" ? "active" : ""
              }`}
              onClick={() => setFeedback("dislike")}
            />
          </div>
        )}
      </motion.div>
    </>
  );
};

export default ChatResponse;
